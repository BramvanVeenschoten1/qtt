module Heteq

import Prelude

def Heq(0 A B : Type)(0 x : A)(0 y : B): Type =
  Pi 0 P : (Pi C : Type, C -> Type), P A x -> P B y

def refl(0 A : Type)(0 x : A): Heq A A x x = fun P px -> px

def sym (0 A B : Type)(0 x : A)(0 y : B): Heq A B x y -> Heq B A y x =
  fun r -> r (fun C z -> Heq C A z x) (refl A x)

def trans(0 A B C : Type)(0 x : A)(0 y : B)(0 z : C): Heq A B x y -> Heq B C y z -> Heq A C x z =
  fun r0 r1 -> r1 (fun D w -> Heq A D x w) r0

def cong (A B : Type)(0 x y : A)(f : Pi A : Type, A -> B)(eq : Heq A A x y): Heq B B (f A x) (f A y) =
  eq (fun C z -> Heq B B (f A x) (f C z)) (refl B (f A x))

def Tid (A B : Type): Type = Pi P : Type -> Type, P A -> P B

var uip : Pi (0 A B : Type)(eq0 : Tid A B)(eq1 : Tid A B), Id (Tid A B) eq0 eq1

def to_hom(0 A : Type)(0 x y : A)(e : Heq A A x y): Id A x y =
  let trefl : Tid A A = fun _ x -> x in
  let cast (A B : Type)(e : Tid A B) : A -> B = e (fun x -> x) in
  let T (e : Tid A A): Id A x (cast A A e x) = 
    uip A A trefl e (fun e1 -> Id A x (cast A A e1 x)) (Prelude.refl A x)
  in
  e (fun C z -> Pi e : Tid C A, Id A x (cast C A e z)) T trefl
(* uses uip *)