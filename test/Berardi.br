module Berardi

(* logical connectives *)

def Bottom : Type = Pi A : Type, A

def Not(A : Type): Type = A -> Bottom

def Top : Type = Not Bottom

def TT : Top = fun x -> x

(* Equality operations *)

def Eq (A : Type)(x y : A) : Type = Pi P : A -> Type, P x -> P y

def Refl (A : Type)(x : A): Eq A x x = fun _ x -> x

def sym (A : Type)(x y : A)(e : Eq A x y): Eq A y x =
  e (fun z -> Eq A z x) (Refl A x)

def trans(A : Type)(x y z : A)(e1 : Eq A x y)(e2 : Eq A y z): Eq A x z =
  e2 (Eq A x) e1


(* Strong sum *)

data Either (A B : Type)
| Left  : A -> Either A B
| Right : B -> Either A B

(* Booleans *)

def Bool : Type = Either Top Top

def True : Bool = Left Top Top TT

def False : Bool = Right Top Top TT

(* Power set operator *)
def Pow (P : Type): Type = P -> Bool

(* Retract : There exist i, j such that j is an inverse of i *)
data Retract(A B : Type)
| MkR : Pi (i : A -> B)
           (j : B -> A)
           (inv : Pi x : A, Eq A (j (i x)) x),
             Retract A B

(* every type is its own retract *)
def TrivialRetract (A : Type): Retract A A =
  MkR A A (fun x -> x) (fun x -> x) (Refl A)

(* Conditional retract: There exist i, j, such that if there is a retract, j is an inverse of i *)
data RetractCond (A B : Type)
| MkC : Pi (i2 : A -> B)
           (j2 : B -> A)
           (inv2 : Retract A B -> Pi x : A, Eq A (j2 (i2 x)) x),
             RetractCond A B

(* first projection from conditional retract *)
def i2 (A B : Type)(rc : RetractCond A B): A -> B =
  match rc with
  | MkC f g i -> f

(* second projection from conditional retract *)
def j2 (A B : Type)(rc : RetractCond A B): B -> A =
  match rc with
  | MkC f g i -> g

(* third projection from conditional retract *)
def inv2(A B : Type)(rc : RetractCond A B): Retract A B -> Pi x : A, Eq A (j2 A B rc (i2 A B rc x)) x =
  match rc return fun (rc : RetractCond A B) -> Retract A B -> Pi x : A, Eq A (j2 A B rc (i2 A B rc x)) x with
  | MkC f g i -> i

(* Predicate on whether a proposition is decidable *)
def Dec (A : Type): Type = Either A (Not A)

(* all propositions are decidable *)
var EM : Pi A : Type, Dec A

(* conditional on decidable propositions *)
def decCond (P B : Type)(em : Dec B)(e1 e2 : P): P =
  match em with
  | Left _ -> e1
  | Right _ -> e2

(* Two powersets conditionally retract *)
def Lemma1 (A B : Type): RetractCond (Pow A) (Pow B) =
  match EM (Retract (Pow A) (Pow B)) with
  | Left ret -> (match ret with
    | MkR f0 g0 e -> MkC (Pow A) (Pow B) f0 g0 (fun _ -> e))
  | Right nr ->
      MkC
        (Pow A)
        (Pow B)
        (fun x y -> False)
        (fun x y -> False)
        (fun r -> nr r (Pi x : Pow A, Eq (Pow A) (fun y -> False) x))

(* The problematic universe *)
def U : Type = Pi P : Type, Pow P

def PU : Type = Pow U

def Psi (X : Type): PU -> Pow X = j2 (Pow X) PU (Lemma1 X U)

def Phi (X : Type): Pow X -> PU = i2 (Pow X) PU (Lemma1 X U)

def projU (u : U): PU = u U

def injU (h : PU): U = fun (X : Type) -> Psi X (Phi U h)

def Lemma2 (f : PU): Eq PU (projU (injU f)) f =
  inv2 PU PU (Lemma1 U U) (TrivialRetract PU) f

def PURetractsU : Retract PU U = MkR PU U injU projU Lemma2

(* The paradoxical set *)

(* element-of predicate *)
def elem (u v : U): Type = Eq Bool ((projU v) u) True

(* conditional on propositions *)
def IfProp (P B : Type)(e1 : P)(e2 : P): P =
  decCond P B (EM B) e1 e2

(* conditional on true propositions evaluate to the first branch *)
def LemmaIfProp1 (P B : Type)(x : B)(e1 e2 : P): Eq P (IfProp P B e1 e2) e1 =
  match EM B return fun (em : Dec B) -> Eq P (decCond P B em e1 e2) e1 with
  | Left _ -> Refl P e1
  | Right w -> w x (Eq P e2 e1)

(* conditionals on false propositions evaluate to the second branch *)
def LemmaIfProp2 (P B : Type)(x : Not B)(e1 e2 : P): Eq P (IfProp P B e1 e2) e2 =
  match EM B return fun (em : Dec B) -> Eq P (decCond P B em e1 e2) e2 with
  | Left w -> x w (Eq P e1 e2)
  | Right _ -> Refl P e2

(* x does not contain itself *)
def notXinX (u : U) : Bool = IfProp Bool (elem u u) False True

(* the set of sets that do not contain themselves *)
def r : U = injU notXinX

(* if r in r, False = True *)
def Lemma3 (rinr : elem r r): Eq Bool False True =
  let T0 : Eq Bool (projU (injU notXinX) r) True = rinr in
  let T1 : Eq Bool (notXinX r) True = Lemma2 notXinX (fun x -> Eq Bool (x r) True) T0 in
  let T2 : Eq Bool (notXinX r) False = LemmaIfProp1 Bool (elem r r) rinr False True in
  let T3 : Eq Bool False (notXinX r) = sym Bool (notXinX r) False T2 in
  let T4 : Eq Bool False True = trans Bool False (notXinX r) True T3 T1 in
    T4

(* if not (r in r), False = True *)
def Lemma4 (notrinr : Not (elem r r)): Eq Bool False True =
  let T0 : Not (Eq Bool (projU (injU notXinX) r) True) = notrinr in
  let T1 : Not (Eq Bool (notXinX r) True) = Lemma2 notXinX (fun x -> Not (Eq Bool (x r) True)) T0 in
  let T2 : (Eq Bool (notXinX r) True) = LemmaIfProp2 Bool (elem r r) notrinr False True in
    T1 T2 (Eq Bool False True)

(* False = True *)
def boolEqual : Eq Bool False True =
  match EM (elem r r) with
  | Left rinr -> Lemma3 rinr
  | Right notrinr -> Lemma4 notrinr

(* Not (False = True) *)
def boolDistinct (e : Eq Bool False True): Bottom =
  e (fun b -> match b with | Left _ -> Bottom | Right _ -> Top) TT

def contradiction : Bottom = boolDistinct boolEqual

