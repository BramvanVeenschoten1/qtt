module Negative

import Prelude

(* This should not pass the positivity checker *)
data Neg
| mk : (Neg -> Void) -> Neg

def omega : Neg -> Void =
  fun x -> match x with | mk y -> y x

def Omega : Void = omega (mk omega)

data Id (A : Type)(x : A): A -> Type
| refl : Id A x x

elim_Id (A : Type)(x y : A)(P : A -> Type)(eq : Id A x y)(px : P x): P y