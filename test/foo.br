module Foo

import Prelude
import Nat
import List




(* mutual inductive test *)
data Foo(A B : Type)
| nil : Foo A B
| cons : A => Bar A B -> Foo A B
and Bar(X Y : Type)
| nol : Bar X Y
| cins : Y -o Foo X Y -> Bar X Y

(* mutual recursive test *)
def Foo_ind
  (A : Type)
  (B : Type)
  (P : Foo A B -> Type)
  (Q : Bar A B -> Type)
  (pnil : P (nil A B))
  (qnil : Q (nol A B))
  (pcons : Pi 0 x : A, Pi xs : Bar A B, Q xs -> P (cons A B x xs))
  (qcons : Pi x : B, Pi xs : Foo A B, P xs -> Q (cins A B x xs))
  (xs : Foo A B):
    P xs =
  match xs return P with
  | nil -> pnil
  | cons x xs -> pcons x xs (bar_ind A B P Q pnil qnil pcons qcons xs)
and bar_ind
  (A : Type)
  (B : Type)
  (P : Foo A B -> Type)
  (Q : Bar A B -> Type)
  (pnil : P (nil A B))
  (qnil : Q (nol A B))
  (pcons : Pi 0 x : A, Pi xs : Bar A B, Q xs -> P (cons A B x xs))
  (qcons : Pi x : B, Pi xs : Foo A B, P xs -> Q (cins A B x xs))
  (xs : Bar A B):
    Q xs =
  match xs return Q with
  | nol -> qnil
  | cins x xs -> qcons x xs (Foo_ind A B P Q pnil qnil pcons qcons xs)

(* fixpoint with nested local definition *)
def even(n : Nat): Bool =
  let odd : Nat -> Bool =
    fun m ->
      match m with
      | zero -> false
      | succ m -> even m
  in match n with
  | zero -> true
  | succ n -> odd  n  

(* derivation of induction on natural numbers using well-founded recursion *)
def nat_wf_rec(0 P : Nat -> Type)(pz : P zero)(ps : Pi n : Nat, P n -> P (succ n))(n : Nat): P n =
  wf_rec Nat Less P (fun x -> match x return fun (x : Nat) -> (Pi y : Nat, Less y x -> P y) -> P x with
    | zero -> fun _ -> pz
    | succ n -> fun f -> ps n (f n (less_than_succ n))) n (nat_acc n)

(* list of three Bools *)
def threeBools : List Bool = MakeList Bool (succ (succ (succ zero))) true false true
