module Postvec

import Nat
import Prelude

(* A few functions on vectors by postulating constructors and destructors *)

var Vec : Type => Nat => Type
var nil : Pi A : Type, Vec A zero
var cons : Pi A : Type, Pi n : Nat, A -o Vec A n -o Vec A (succ n)
var vec_rec :
  Pi 0 A : Type,
  Pi P : (Pi n : Nat, Vec A n -> Type),
  P zero (nil A) ->
  (Pi n : Nat, Pi x : A, Pi xs : Vec A n, P n xs -> P (succ n) (cons A n x xs)) ->
  Pi n : Nat,
  Pi xs : Vec A n,
    P n xs

var Fin : Nat => Type
var fzero : Pi n : Nat, Fin (succ n)
var fsucc : Pi n : Nat, Fin n -> Fin (succ n)
var fin_rec : 
  Pi P : (Pi n : Nat, Fin n -> Type),
  (Pi n : Nat, P (succ n) (fzero n)) ->
  (Pi (n : Nat)(i : Fin n), P (succ n) (fsucc n i)) ->
  Pi (n : Nat)(i : Fin n), P n i

def fin_zero (A : Type): Fin zero -> A =
  fin_rec
    (fun m i -> match m with | zero -> A | succ _ -> Unit)
    (fun _ -> tt)
    (fun _ _ -> tt)
    zero

def nth {A : Type}: Pi n : Nat, Vec A n -> Fin n -> A =
  vec_rec A (fun n xs -> Fin n -> A)
    (fin_zero A)
    (fun n x xs ih i -> fin_rec (fun m i -> Id Nat m (succ n) -> A)
      (fun m eq -> x)
      (fun m i eq ->
      let T = no_conf (succ m) (succ n) eq Fin in
      ih (T i)) (succ n) i (refl Nat (succ n)))

def zipWith {A B C : Type}(f : A -> B -> C): Pi {n : Nat}, Vec A n -> Vec B n -> Vec C n =
  vec_rec A (fun n xs -> Pi ys : Vec B n, Vec C n)
    (fun ys -> nil C)
    (fun m x _ ih ys ->
      vec_rec B (fun n ys -> Id Nat (succ m) n -> Vec C n)
        (fun eq -> no_conf (succ m) zero eq (Vec C zero))
        (fun k y ys _ eq -> 
          let T = no_conf (succ m) (succ k) eq (fun m -> Vec B m -> Vec C m) in
          cons C k (f x y) (T ih ys))
        (succ m) ys (refl Nat (succ m)))